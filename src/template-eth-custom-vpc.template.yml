# Use this template if you wish to stand up the instances in a custom VPC

AWSTemplateFormatVersion: '2010-09-09'

Metadata:
  RepoUrl: https://github.com/mludvig/aws-ethereum-miner
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Miner Configuration
        Parameters:
        - EthWallet
        - Hashrate

      - Label:
          default: Instance Configuration
        Parameters:
        - InstanceTypes
        - PricingPlan

      - Label:
          default: Networking Configuration
        Parameters:
        - VpcId
        - SubnetIds

Parameters:
  InstanceTypes:
    Description: |
      Instance types to choose from. Can be "*" to use all available, or wildcards e.g. "g4dn.*,g5.*",
      or a list of specific instances e.g. "p3.2xlarge,p3.8xlarge". The most cost effective combination
      of available instances will be used.
    Type: String
    Default: "*"

  Hashrate:
    Description: |
      Required hashrate in MH/s. AWS will start the most cost effective available
      instances to achieve this Hashrate. Minimum is 25 (1x g4dn.xlarge).
    Type: Number
    Default: 250
    MinValue: 25

  EthWallet:
    Type: String
    Description: Ethereum Wallet Address
    Default: "0x99b36B44cf319c9E0ed4619ee2050B21ECac2c15"

  PricingPlan:
    Type: String
    Description: Spot or On-Demand or Both
    AllowedValues:
    - spot
    - ondemand
    - both
    Default: both

  VpcId:
    Description: The VPC where this stack will be deployed
    Type: AWS::EC2::VPC::Id

  SubnetIds:
    Description: The subnets where the instances will be deployed - at least 3 subnets!
    Type: List<AWS::EC2::Subnet::Id>

Mappings:
  # ImageId of "cuda-11 2021-11-19T06-45-18.713Z" in each region
  RegionMap:
    ap-northeast-1:
      ImageId: ami-057223d0b465ef6c8
    ap-northeast-2:
      ImageId: ami-04974804b5c32ad3f
    ap-south-1:
      ImageId: ami-0138f84dea0009e24
    ap-southeast-1:
      ImageId: ami-028fec8125dca56aa
    ap-southeast-2:
      ImageId: ami-07b457617d5ab5026
    ca-central-1:
      ImageId: ami-00cbba349f2627bef
    eu-central-1:
      ImageId: ami-0527e1e1ca0929e8c
    eu-north-1:
      ImageId: ami-070fab14d346eec81
    eu-west-1:
      ImageId: ami-052dfb972e5a6cdd0
    eu-west-2:
      ImageId: ami-0126c804cd6d92090
    eu-west-3:
      ImageId: ami-0fe47281cdcb0102b
    sa-east-1:
      ImageId: ami-0ad6f33841de28c4c
    us-east-1:
      ImageId: ami-04822dc0e04836a86
    us-east-2:
      ImageId: ami-0b3cc42a259739f29
    us-west-1:
      ImageId: ami-00158baf36cd6ace7
    us-west-2:
      ImageId: ami-013f60ec8ba5a9ca4


  CapacityAllocation:
    spot:
      OnDemandPct: "0"
    both:
      OnDemandPct: "50"
    ondemand:
      OnDemandPct: "100"

Resources:
  InstanceFilter:
    Type: Custom::InstanceFilter
    Properties:
      ServiceToken: !GetAtt InstanceFilterLambda.Arn
      InstanceTypesWanted: !Ref InstanceTypes
      InstanceTypesAttributes:
      # WeightedCapacity is the instance type Hashrate in MH/s
      - InstanceType: g5.xlarge
        WeightedCapacity: "56"
      - InstanceType: g5.24xlarge
        WeightedCapacity: "226"
      - InstanceType: g5.48xlarge
        WeightedCapacity: "452"
      - InstanceType: g4dn.xlarge
        WeightedCapacity: "25"
      - InstanceType: g4dn.2xlarge
        WeightedCapacity: "25"
      - InstanceType: g4dn.12xlarge
        WeightedCapacity: "100"
      - InstanceType: g4dn.metal
        WeightedCapacity: "204"
      - InstanceType: p3.2xlarge
        WeightedCapacity: "93"
      - InstanceType: p3.8xlarge
        WeightedCapacity: "372"
      - InstanceType: p3.16xlarge
        WeightedCapacity: "744"
      - InstanceType: p3dn.24xlarge
        WeightedCapacity: "692"
      ## p4d.24xlarge doesn't work with ethminer
      #- InstanceType: p4d.24xlarge
      #  WeightedCapacity: "999" # It's in fact ~1400 but the max value allowed here is 999

  InstanceFilterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        # Lambda source is in src/lambdas/instance-filter.py
        ZipFile: |
          %%{lambdas/instance-filter.min.py}%%
      Handler: "index.lambda_handler"
      Runtime: python3.9
      Timeout: 10
      Role: !GetAtt LambdaExecutionRole.Arn

  AsgUpdater:
    DependsOn:
    - Asg
    Type: Custom::AsgUpdater
    Properties:
      ServiceToken: !GetAtt AsgUpdaterLambda.Arn
      AsgName: !Ref Asg
      DesiredCapacity: !Ref Hashrate

  AsgUpdaterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        # Lambda source is in src/lambdas/asg-updater.py
        ZipFile: |
          %%{lambdas/asg-updater.min.py}%%
      Handler: "index.lambda_handler"
      Runtime: python3.9
      Timeout: 10
      Role: !GetAtt LambdaExecutionRole.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: InstanceFilter
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeInstanceTypeOfferings
            - ec2:DescribeInstanceTypes
            - ec2:DescribeSpotPriceHistory
            - autoscaling:SetDesiredCapacity
            Resource: "*"

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref InstanceRole

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", ImageId ]
        SecurityGroupIds:
        - !Ref SecurityGroup
        UserData:
          'Fn::Base64':
            'Fn::Sub': |
                #!/bin/bash -x
                cd /tmp
                wget -O ethminer.tar.gz https://ethminer-cuda.s3.amazonaws.com/0.19.0/ethminer-0.19.0-cuda-11-linux-x86_64.tar.gz
                tar xvfz ethminer.tar.gz
                cd bin
                cat > runner.sh << __EOF__
                #!/bin/bash -x
                SERVERS=(us1 us2 eu1 asia1)
                while (true); do
                  PREFERRED_SERVER=\${!SERVERS[\${!RANDOM} % \${!#SERVERS[@]}]}
                  ./ethminer \
                    -P stratums://${EthWallet}@\${!PREFERRED_SERVER}.ethermine.org:5555 \
                    -P stratums://${EthWallet}@us1.ethermine.org:5555 \
                    -P stratums://${EthWallet}@us2.ethermine.org:5555 \
                    -P stratums://${EthWallet}@eu1.ethermine.org:5555 \
                    -P stratums://${EthWallet}@asia1.ethermine.org:5555 \
                  >> /tmp/ethminer.log 2>&1
                  sleep 1
                done
                __EOF__
                chmod +x runner.sh
                nohup ./runner.sh &

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref AWS::StackName
      VpcId: !Ref VpcId
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  Asg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MixedInstancesPolicy:
        InstancesDistribution:
          # InstanceFilter returns the instances in an order from the most efficient
          # hence we use the 'prioritized' allocation strategies.
          SpotAllocationStrategy: capacity-optimized-prioritized
          OnDemandAllocationStrategy: prioritized
          OnDemandBaseCapacity: "0"
          OnDemandPercentageAboveBaseCapacity: !FindInMap [ CapacityAllocation, !Ref PricingPlan, OnDemandPct ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides: !GetAtt InstanceFilter.InstanceTypeAttributes
      MinSize: 0
      MaxSize: !Ref Hashrate
      DesiredCapacity: 0      # This will be updated by AsgUpdater a little later
      CapacityRebalance: true
      VPCZoneIdentifier: !Ref SubnetIds
      HealthCheckGracePeriod: 900
      HealthCheckType: EC2
      TerminationPolicies:
      - AllocationStrategy
      - OldestLaunchConfiguration
      NotificationConfigurations:
      - TopicARN: !Ref NotificationTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
        PropagateAtLaunch: true
    CreationPolicy:
      #AutoScalingCreationPolicy:
      #  MinSuccessfulInstancesPercent: 0
      ResourceSignal:
        Count: 0
        Timeout: PT1M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        WaitOnResourceSignals: false

  NotificationTopic:
    Type: AWS::SNS::Topic

Outputs:
  InstanceTypesRequested:
    Description: List of instance types requested in the ASG (filtered by InstanceTypesWanted and regional availability)
    Value: !GetAtt InstanceFilter.InstanceTypeNames

  NotificationTopic:
    Description: Monitoring notification topic
    Value: !Ref NotificationTopic

  DashboardUrl:
    Description: Ethermine Dashboard URL
    Value: !Sub "https://ethermine.org/miners/${EthWallet}/dashboard"
