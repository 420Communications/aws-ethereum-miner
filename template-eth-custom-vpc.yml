# ============================= #
# !!! Do NOT edit this file !!! #
# ============================= #
# Instead edit template-eth-custom-vpc.template.yml and run 'import-files.py' again

# Use this template if you wish to stand up the instances in a custom VPC

AWSTemplateFormatVersion: '2010-09-09'

Metadata:
  RepoUrl: https://github.com/mludvig/aws-ethereum-miner
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Miner Configuration
        Parameters:
        - EthWallet
        - Hashrate

      - Label:
          default: Instance Configuration
        Parameters:
        - InstanceTypes
        - PricingPlan

      - Label:
          default: Networking Configuration
        Parameters:
        - VpcId
        - SubnetIds

Parameters:
  InstanceTypes:
    Description: |
      Instance types to choose from. Can be "*" to use all available, or wildcards e.g. "g4dn.*,g5.*",
      or a list of specific instances e.g. "p3.2xlarge,p3.8xlarge", or an exclusion e.g. "-g5g.*".
      The most cost effective combination of available instances will be used first.
    Type: String
    Default: "*"

  Hashrate:
    Description: |
      Required hashrate in MH/s. AWS will start the most cost effective available
      instances to achieve this Hashrate. Minimum is 25 (1x g4dn.xlarge).
    Type: Number
    Default: 250
    MinValue: 25

  EthWallet:
    Type: String
    Description: Ethereum Wallet Address
    Default: "0x99b36B44cf319c9E0ed4619ee2050B21ECac2c15"

  PricingPlan:
    Type: String
    Description: Spot or On-Demand or Both
    AllowedValues:
    - spot
    - ondemand
    - both
    Default: both

  VpcId:
    Description: The VPC where this stack will be deployed
    Type: AWS::EC2::VPC::Id

  SubnetIds:
    Description: The subnets where the instances will be deployed - at least 3 subnets!
    Type: List<AWS::EC2::Subnet::Id>

Mappings:
  ImageMap:
    ap-northeast-1:
      CudaX8664: ami-082bd38dfaca3acfc
      CudaARM64: ami-03cfc4c191225eb63
      RadeonX8664: ami-0920895676fcb4966
      DeepLearning: ami-01c65cc8d340075de
    ap-northeast-2:
      CudaX8664: ami-083908c0e20eec10c
      CudaARM64: ami-008e8380c1a01df48
      RadeonX8664: ami-0f103c00fa9bafb0e
      DeepLearning: ami-098d41704fc158cf9
    ap-northeast-3:
      CudaX8664: ami-09ed181b0f77e1cb6
      CudaARM64: ami-05d0a2d3d89e47b14
      RadeonX8664: ami-0061fb4cd85051d8e
      DeepLearning: ami-02fe50b618ba8eb11
    ap-south-1:
      CudaX8664: ami-04ce61217128305f7
      CudaARM64: ami-065529224fc0c9773
      RadeonX8664: ami-0eeb53661d79e3b9c
      DeepLearning: ami-0e0c9ee0efef0c6e7
    ap-southeast-1:
      CudaX8664: ami-0ae30e12bb25a9cb7
      CudaARM64: ami-09f6f0c3b9df84656
      RadeonX8664: ami-00d3ca16eff5adb63
      DeepLearning: ami-0e9e6b131cf370b03
    ap-southeast-2:
      CudaX8664: ami-0640b2406d9d05952
      CudaARM64: ami-0ad216730d18dd2ca
      RadeonX8664: ami-0a04fe46aa8bcaaf7
      DeepLearning: ami-0c21dee5e16af0a63
    ca-central-1:
      CudaX8664: ami-04d1ec40666bc22ed
      CudaARM64: ami-0fd96731816fc0d0b
      RadeonX8664: ami-04ad2df5b2bf97fd5
      DeepLearning: ami-080127ab7a96d5442
    eu-central-1:
      CudaX8664: ami-061fb32bcd25aa050
      CudaARM64: ami-0cac79f806628557d
      RadeonX8664: ami-01f76f27dba711db3
      DeepLearning: ami-028d4e10fae5e2d9c
    eu-north-1:
      CudaX8664: ami-0ca95b3411f4d6483
      CudaARM64: ami-0d786296f345805b8
      RadeonX8664: ami-08dc54829d51009d9
      DeepLearning: ami-072b118476d963637
    eu-west-1:
      CudaX8664: ami-02811629a14fe22b7
      CudaARM64: ami-00b44c1ea1a48e6c9
      RadeonX8664: ami-05f8a1fbb5cd80c47
      DeepLearning: ami-096cf47f79196aeb7
    eu-west-2:
      CudaX8664: ami-05723ed7dcde2ed03
      CudaARM64: ami-00501db2636f57399
      RadeonX8664: ami-0bc7c7f3180e6e855
      DeepLearning: ami-0e0784eb42a8182f3
    eu-west-3:
      CudaX8664: ami-0f7e214d4e8949926
      CudaARM64: ami-05f7e54745683262e
      RadeonX8664: ami-083e41b99285e8504
      DeepLearning: ami-05ec8353ae3e77e65
    sa-east-1:
      CudaX8664: ami-0c6106e11e002b4d5
      CudaARM64: ami-02520949fc64a8b84
      RadeonX8664: ami-06bf11059e19f03c9
      DeepLearning: ami-08c45940a850aa288
    us-east-1:
      CudaX8664: ami-06e195fa0814f3780
      CudaARM64: ami-086d383320c0fde3e
      RadeonX8664: ami-0476917f2861069bf
      DeepLearning: ami-0b860b555a071dc60
    us-east-2:
      CudaX8664: ami-0aac7db8a29de3057
      CudaARM64: ami-0dfb8c07bc48f8b50
      RadeonX8664: ami-0f28b3a6ec09b33d5
      DeepLearning: ami-09a8f1a054ef4f197
    us-west-1:
      CudaX8664: ami-0b51b6e59d7ad6569
      CudaARM64: ami-0dd1eefaffa7b63a9
      RadeonX8664: ami-092ae28e6514057a0
      DeepLearning: ami-0636fbe6103ad792a
    us-west-2:
      CudaX8664: ami-09a94209c9d45342b
      CudaARM64: ami-04ff6361d2fab7b48
      RadeonX8664: ami-0356d91a89300f274
      DeepLearning: ami-083afc3c818dc14bd

  CapacityAllocation:
    spot:
      OnDemandPct: "0"
    both:
      OnDemandPct: "50"
    ondemand:
      OnDemandPct: "100"

Resources:
  InstanceFilter:
    Type: Custom::InstanceFilter
    Properties:
      ServiceToken: !GetAtt InstanceFilterLambda.Arn
      InstanceTypesWanted: !Ref InstanceTypes
      InstanceTypesAttributes:
      # WeightedCapacity is the instance type Hashrate in MH/s
      - InstanceType: g4ad.xlarge
        WeightedCapacity: "48"
        LaunchTemplateSpecification:
          LaunchTemplateId: !Ref LaunchTemplateRadeonX8664
          Version: !GetAtt LaunchTemplateRadeonX8664.LatestVersionNumber
      - InstanceType: g4ad.2xlarge
        WeightedCapacity: "48"
        LaunchTemplateSpecification:
          LaunchTemplateId: !Ref LaunchTemplateRadeonX8664
          Version: !GetAtt LaunchTemplateRadeonX8664.LatestVersionNumber
      - InstanceType: g4ad.4xlarge
        WeightedCapacity: "48"
        LaunchTemplateSpecification:
          LaunchTemplateId: !Ref LaunchTemplateRadeonX8664
          Version: !GetAtt LaunchTemplateRadeonX8664.LatestVersionNumber
        _ExcludeInRegions:
        - ca-central-1
        - eu-central-1
      - InstanceType: g4ad.8xlarge
        WeightedCapacity: "96"
        LaunchTemplateSpecification:
          LaunchTemplateId: !Ref LaunchTemplateRadeonX8664
          Version: !GetAtt LaunchTemplateRadeonX8664.LatestVersionNumber
        _ExcludeInRegions:
        - ca-central-1
        - eu-central-1
      - InstanceType: g4ad.16xlarge
        WeightedCapacity: "192"
        LaunchTemplateSpecification:
          LaunchTemplateId: !Ref LaunchTemplateRadeonX8664
          Version: !GetAtt LaunchTemplateRadeonX8664.LatestVersionNumber
        _ExcludeInRegions:
        - ca-central-1
        - eu-central-1
      - InstanceType: g5g.xlarge
        WeightedCapacity: "25"
        LaunchTemplateSpecification:
          LaunchTemplateId: !Ref LaunchTemplateCudaARM64
          Version: !GetAtt LaunchTemplateCudaARM64.LatestVersionNumber
      - InstanceType: g5g.2xlarge
        WeightedCapacity: "25"
        LaunchTemplateSpecification:
          LaunchTemplateId: !Ref LaunchTemplateCudaARM64
          Version: !GetAtt LaunchTemplateCudaARM64.LatestVersionNumber
      - InstanceType: g5.xlarge
        WeightedCapacity: "56"
      - InstanceType: g5.24xlarge
        WeightedCapacity: "226"
      - InstanceType: g5.48xlarge
        WeightedCapacity: "452"
      - InstanceType: g4dn.xlarge
        WeightedCapacity: "25"
      - InstanceType: g4dn.2xlarge
        WeightedCapacity: "25"
      - InstanceType: g4dn.12xlarge
        WeightedCapacity: "100"
      - InstanceType: g4dn.metal
        WeightedCapacity: "204"
      - InstanceType: p3.2xlarge
        WeightedCapacity: "93"
      - InstanceType: p3.8xlarge
        WeightedCapacity: "372"
      - InstanceType: p3.16xlarge
        WeightedCapacity: "744"
      - InstanceType: p3dn.24xlarge
        WeightedCapacity: "692"
      - InstanceType: p4d.24xlarge
        WeightedCapacity: "999" # It's in fact ~1350 but the max value allowed here is 999
        LaunchTemplateSpecification:
          LaunchTemplateId: !Ref LaunchTemplateDeepLearning
          Version: !GetAtt LaunchTemplateDeepLearning.LatestVersionNumber

  InstanceFilterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        # Lambda source is in src/lambdas/instance-filter.py
        ZipFile: |
          #!/usr/bin/env python3
          import os
          import json
          import urllib3
          import datetime
          import boto3
          http=urllib3.PoolManager()
          ec2=boto3.client("ec2")
          VPC_ID=os.getenv("VPC_ID")
          SUCCESS="SUCCESS"
          FAILED="FAILED"
          def send(event,context,status,data={},reason=None):
           responseUrl=event["ResponseURL"]
           responseBody={"Status":status,"PhysicalResourceId":context.log_stream_name,"StackId":event["StackId"],"RequestId":event["RequestId"],"LogicalResourceId":event["LogicalResourceId"],"Reason":reason or "See the details in CloudWatch Log Stream: {}".format(context.log_stream_name),}
           if data:
            responseBody["Data"]=data
           json_responseBody=json.dumps(responseBody)
           print("== RESPONSE ==")
           print(json_responseBody)
           headers={"content-type":"","content-length":str(len(json_responseBody))}
           try:
            response=http.request("PUT",responseUrl,headers=headers,body=json_responseBody)
            print("Status code:",response.status)
           except Exception as e:
            print("send(..) failed executing http.request(..):",e)
          def filter_wanted(types,wanted):
           if wanted=="*":
            print(f"Instance types wanted: * (=any)")
            return True,types
           wanted_list=list(map(lambda x:x.strip().rstrip("*").lower(),wanted.split(",")))
           wanted_list=list(map(lambda x:x if x.find(".")>=0 else f"{x}.",wanted_list))
           unwanted_list=list(filter(lambda x:x.startswith('-'),wanted_list))
           wanted_list=[wt for wt in wanted_list if wt not in unwanted_list]
           unwanted_list=[ut[1:]for ut in unwanted_list]
           print(f"Instance types wanted: {' '.join(wanted_list)} / unwanted: {' '.join(unwanted_list)}")
           unwanted_types=[]
           for ut in unwanted_list:
            unwanted_types.extend(list(filter(lambda x:x.startswith(ut),types)))
           unwanted_types=set(unwanted_types)
           types=list(set(types).difference(unwanted_types))
           if not wanted_list or wanted_list=="*":
            print(f"Instance types filtered: {' '.join(types)}")
            return True,types
           filtered_types=[]
           for wt in wanted_list:
            filtered_types.extend(list(filter(lambda x:x.startswith(wt),types)))
           filtered_types=list(set(filtered_types)) 
           if not filtered_types:
            return False,"No wanted instance types match the available types."
           print(f"Instance types filtered: {' '.join(filtered_types)}")
           return True,filtered_types
          def filter_available(types):
           result=ec2.describe_instance_type_offerings(LocationType="region",Filters=[{"Name":"instance-type","Values":types}])
           types_available=list(map(lambda x:x["InstanceType"],result["InstanceTypeOfferings"]))
           print(f"Instance types available in this region: {' '.join(types_available)}")
           return True,types_available
          def sort_by_efficiency(attrs):
           data={t["InstanceType"]:t for t in attrs}
           result=ec2.describe_spot_price_history(InstanceTypes=list(data.keys()),ProductDescriptions=["Linux/UNIX","Linux/UNIX (Amazon VPC)"],StartTime=datetime.datetime.now()-datetime.timedelta(minutes=1),)
           for r in result["SpotPriceHistory"]:
            if not VPC_ID and r["ProductDescription"].endswith("(Amazon VPC)"):
             raise Exception('Your account still supports EC2-Classic. Please deploy "template-eth-custom-vpc.yml" instead.')
            t=r["InstanceType"]
            if "_count" not in data[t]:
             data[t]["_count"]=0
             data[t]["_sum"]=0.0
            data[t]["_count"]+=1
            data[t]["_sum"]+=float(r["SpotPrice"])
           for t in data.keys():
            data[t]["_spot"]=data[t]["_sum"]/data[t]["_count"]
            data[t]["_efficiency"]=(float(data[t].get("WeightedCapacity",1))/data[t]["_spot"])
            del data[t]["_sum"]
            del data[t]["_count"]
           attrs=list(data.values())
           attrs.sort(key=lambda x:(-x["_efficiency"],x["_spot"]))
           print(f"Instances sorted: {json.dumps(attrs)}")
           for a in attrs:
            for key in list(a.keys()):
             if key.startswith("_"):
              del a[key]
           return attrs
          def lambda_handler(event,context):
           print("== EVENT ==")
           print(json.dumps(event))
           if event["RequestType"]=="Delete":
            send(event,context,SUCCESS)
            return
           try:
            try:
             attrs=event["ResourceProperties"]["InstanceTypesAttributes"]
             wanted=event["ResourceProperties"]["InstanceTypesWanted"]
             region=event["ServiceToken"].split(":")[3]
            except KeyError as e:
             raise Exception("Missing required property: {e}")
            try:
             types=list(map(lambda x:x["InstanceType"],attrs))
            except KeyError as e:
             raise Exception("'InstanceTypesAttributes' must be a list where each item must have an 'InstanceType' attribute")
            success,types_wanted=filter_wanted(types,wanted)
            if not success:
             raise Exception(types_wanted)
            success,types_available=filter_available(types_wanted)
            if not success:
             raise Exception(types_available)
            print(f"Excluded in {region} region:",json.dumps([x["InstanceType"]for x in attrs if region in x.get("_ExcludeInRegions",[])]),)
            attrs=list(filter(lambda x:x["InstanceType"]in types_available and region not in x.get("_ExcludeInRegions",[]),attrs,))
            if not attrs:
             raise Exception("None of the requested instance types is available in this region!")
            attrs=sort_by_efficiency(attrs)
            types_sorted=list(map(lambda x:x["InstanceType"],attrs))
           except Exception as e:
            send(event,context,FAILED,reason=f"Error: {e}")
            return False
           send(event,context,SUCCESS,{"InstanceTypeNames":" ".join(types_sorted),"InstanceTypeAttributes":attrs,},)
          # Created by pyminifier (https://github.com/liftoff/pyminifier)
          
      Handler: "index.lambda_handler"
      Runtime: python3.9
      Timeout: 10
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          VPC_ID: !Ref VpcId

  AsgUpdater:
    DependsOn:
    - Asg
    Type: Custom::AsgUpdater
    Properties:
      ServiceToken: !GetAtt AsgUpdaterLambda.Arn
      AsgName: !Ref Asg
      DesiredCapacity: !Ref Hashrate
      InstanceFilter: !GetAtt InstanceFilter.InstanceTypeAttributes

  AsgUpdaterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        # Lambda source is in src/lambdas/asg-updater.py
        ZipFile: |
          #!/usr/bin/env python3
          import json
          import boto3
          import urllib3
          http=urllib3.PoolManager()
          asg=boto3.client("autoscaling")
          SUCCESS="SUCCESS"
          FAILED="FAILED"
          def send(event,context,status,data={},reason=None):
           responseUrl=event["ResponseURL"]
           responseBody={"Status":status,"PhysicalResourceId":context.log_stream_name,"StackId":event["StackId"],"RequestId":event["RequestId"],"LogicalResourceId":event["LogicalResourceId"],"Reason":reason or "See the details in CloudWatch Log Stream: {}".format(context.log_stream_name),}
           if data:
            responseBody["Data"]=data
           json_responseBody=json.dumps(responseBody)
           print("== RESPONSE ==")
           print(json_responseBody)
           headers={"content-type":"","content-length":str(len(json_responseBody))}
           try:
            response=http.request("PUT",responseUrl,headers=headers,body=json_responseBody)
            print("Status code:",response.status)
           except Exception as e:
            print("send(..) failed executing http.request(..):",e)
          def lambda_handler(event,context):
           print("== EVENT ==")
           print(json.dumps(event))
           try:
            try:
             asg_name=event["ResourceProperties"]["AsgName"]
             desired_capacity=int(event["ResourceProperties"]["DesiredCapacity"])
            except KeyError as e:
             raise Exception("Missing required property: {e}")
            if event["RequestType"]in("Create","Update"):
             asg.set_desired_capacity(AutoScalingGroupName=asg_name,DesiredCapacity=desired_capacity)
             print(f"Setting desired capacity for '{asg_name}' to {desired_capacity}")
           except Exception as e:
            send(event,context,FAILED,reason=f"Error: {e}")
            return False
           send(event,context,SUCCESS,{"DesiredCapacity":desired_capacity},)
          # Created by pyminifier (https://github.com/liftoff/pyminifier)
          
      Handler: "index.lambda_handler"
      Runtime: python3.9
      Timeout: 10
      Role: !GetAtt LambdaExecutionRole.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: InstanceFilter
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeInstanceTypeOfferings
            - ec2:DescribeInstanceTypes
            - ec2:DescribeSpotPriceHistory
            - autoscaling:SetDesiredCapacity
            Resource: "*"

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref InstanceRole

  LaunchTemplateCudaX8664:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !FindInMap [ ImageMap, !Ref "AWS::Region", CudaX8664 ]
        SecurityGroupIds:
        - !Ref SecurityGroup
        UserData:
          'Fn::Base64':
            'Fn::Sub':
              - |
                #!/bin/bash -x
                cd /tmp
                AZID=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone-id | cut -d- -f1)
                INSTTYPE=$(curl -s http://169.254.169.254/latest/meta-data/instance-type)
                wget -O ethminer.tar.gz "https://ethminer-cuda.s3.amazonaws.com/0.19.0/${EthminerTarGz}?az=${!AZID}&type=${!INSTTYPE}"
                tar xvfz ethminer.tar.gz
                cd bin
                case ${!AZID:0:1} in
                  u) PREFERRED_SERVER="us1";;
                  e) PREFERRED_SERVER="eu1";;
                  a) PREFERRED_SERVER="asia1";;
                  *) PREFERRED_SERVER="us2";;
                esac
                cat > runner.sh << __EOF__
                #!/bin/bash -x
                while (true); do
                  ./ethminer ${EthminerArgs} \
                    -P stratums://${EthWallet}.${AWS::Region}@${!PREFERRED_SERVER}.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${AWS::Region}@us1.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${AWS::Region}@us2.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${AWS::Region}@eu1.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${AWS::Region}@asia1.ethermine.org:5555 \
                  >> /tmp/ethminer.log 2>&1
                  sleep 1
                done
                __EOF__
                chmod +x runner.sh
                nohup ./runner.sh &
              - EthminerTarGz: ethminer-0.19.0-cuda-11-linux-x86_64.tar.gz
                EthminerArgs: "-U"

  LaunchTemplateRadeonX8664:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !FindInMap [ ImageMap, !Ref "AWS::Region", RadeonX8664 ]
        SecurityGroupIds:
        - !Ref SecurityGroup
        UserData:
          'Fn::Base64':
            'Fn::Sub':
              - |
                #!/bin/bash -x
                cd /tmp
                AZID=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone-id | cut -d- -f1)
                INSTTYPE=$(curl -s http://169.254.169.254/latest/meta-data/instance-type)
                wget -O ethminer.tar.gz "https://ethminer-cuda.s3.amazonaws.com/0.19.0/${EthminerTarGz}?az=${!AZID}&type=${!INSTTYPE}"
                tar xvfz ethminer.tar.gz
                cd bin
                case ${!AZID:0:1} in
                  u) PREFERRED_SERVER="us1";;
                  e) PREFERRED_SERVER="eu1";;
                  a) PREFERRED_SERVER="asia1";;
                  *) PREFERRED_SERVER="us2";;
                esac
                cat > runner.sh << __EOF__
                #!/bin/bash -x
                while (true); do
                  ./ethminer ${EthminerArgs} \
                    -P stratums://${EthWallet}.${AWS::Region}@${!PREFERRED_SERVER}.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${AWS::Region}@us1.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${AWS::Region}@us2.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${AWS::Region}@eu1.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${AWS::Region}@asia1.ethermine.org:5555 \
                  >> /tmp/ethminer.log 2>&1
                  sleep 1
                done
                __EOF__
                chmod +x runner.sh
                nohup ./runner.sh &
              - EthminerTarGz: ethminer-0.19.0-cuda-11-opencl-linux-x86_64.tar.gz
                EthminerArgs: "-G"

  LaunchTemplateCudaARM64:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !FindInMap [ ImageMap, !Ref "AWS::Region", CudaARM64 ]
        SecurityGroupIds:
        - !Ref SecurityGroup
        UserData:
          'Fn::Base64':
            'Fn::Sub':
              - |
                #!/bin/bash -x
                cd /tmp
                AZID=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone-id | cut -d- -f1)
                INSTTYPE=$(curl -s http://169.254.169.254/latest/meta-data/instance-type)
                wget -O ethminer.tar.gz "https://ethminer-cuda.s3.amazonaws.com/0.19.0/${EthminerTarGz}?az=${!AZID}&type=${!INSTTYPE}"
                tar xvfz ethminer.tar.gz
                cd bin
                case ${!AZID:0:1} in
                  u) PREFERRED_SERVER="us1";;
                  e) PREFERRED_SERVER="eu1";;
                  a) PREFERRED_SERVER="asia1";;
                  *) PREFERRED_SERVER="us2";;
                esac
                cat > runner.sh << __EOF__
                #!/bin/bash -x
                while (true); do
                  ./ethminer ${EthminerArgs} \
                    -P stratums://${EthWallet}.${AWS::Region}@${!PREFERRED_SERVER}.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${AWS::Region}@us1.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${AWS::Region}@us2.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${AWS::Region}@eu1.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${AWS::Region}@asia1.ethermine.org:5555 \
                  >> /tmp/ethminer.log 2>&1
                  sleep 1
                done
                __EOF__
                chmod +x runner.sh
                nohup ./runner.sh &
              - EthminerTarGz: ethminer-0.19.0-cuda-11-linux-aarch64.tar.gz
                EthminerArgs: "-U"

  LaunchTemplateDeepLearning:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !FindInMap [ ImageMap, !Ref "AWS::Region", DeepLearning ]
        SecurityGroupIds:
        - !Ref SecurityGroup
        UserData:
          'Fn::Base64':
            'Fn::Sub':
              - |
                #!/bin/bash -x
                cd /tmp
                AZID=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone-id | cut -d- -f1)
                INSTTYPE=$(curl -s http://169.254.169.254/latest/meta-data/instance-type)
                wget -O ethminer.tar.gz "https://ethminer-cuda.s3.amazonaws.com/0.19.0/${EthminerTarGz}?az=${!AZID}&type=${!INSTTYPE}"
                tar xvfz ethminer.tar.gz
                cd bin
                case ${!AZID:0:1} in
                  u) PREFERRED_SERVER="us1";;
                  e) PREFERRED_SERVER="eu1";;
                  a) PREFERRED_SERVER="asia1";;
                  *) PREFERRED_SERVER="us2";;
                esac
                cat > runner.sh << __EOF__
                #!/bin/bash -x
                while (true); do
                  ./ethminer ${EthminerArgs} \
                    -P stratums://${EthWallet}.${AWS::Region}@${!PREFERRED_SERVER}.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${AWS::Region}@us1.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${AWS::Region}@us2.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${AWS::Region}@eu1.ethermine.org:5555 \
                    -P stratums://${EthWallet}.${AWS::Region}@asia1.ethermine.org:5555 \
                  >> /tmp/ethminer.log 2>&1
                  sleep 1
                done
                __EOF__
                chmod +x runner.sh
                nohup ./runner.sh &
              - EthminerTarGz: ethminer-0.19.0-cuda-11-linux-x86_64.tar.gz
                EthminerArgs: "-U"

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref AWS::StackName
      VpcId: !Ref VpcId
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  Asg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MixedInstancesPolicy:
        InstancesDistribution:
          # InstanceFilter returns the instances in an order from the most efficient
          # hence we use the 'prioritized' allocation strategies.
          SpotAllocationStrategy: capacity-optimized-prioritized
          OnDemandAllocationStrategy: prioritized
          OnDemandBaseCapacity: "0"
          OnDemandPercentageAboveBaseCapacity: !FindInMap [ CapacityAllocation, !Ref PricingPlan, OnDemandPct ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplateCudaX8664
            Version: !GetAtt LaunchTemplateCudaX8664.LatestVersionNumber
          Overrides: !GetAtt InstanceFilter.InstanceTypeAttributes
      MinSize: 0
      MaxSize: !Ref Hashrate
      DesiredCapacity: 0      # This will be updated by AsgUpdater a little later
      CapacityRebalance: true
      VPCZoneIdentifier: !Ref SubnetIds
      HealthCheckGracePeriod: 900
      HealthCheckType: EC2
      MetricsCollection:
      - Granularity: 1Minute
      TerminationPolicies:
      - AllocationStrategy
      - OldestLaunchConfiguration
      NotificationConfigurations:
      - TopicARN: !Ref NotificationTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
        PropagateAtLaunch: true
    CreationPolicy:
      #AutoScalingCreationPolicy:
      #  MinSuccessfulInstancesPercent: 0
      ResourceSignal:
        Count: 0
        Timeout: PT1M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        WaitOnResourceSignals: false

  NotificationTopic:
    Type: AWS::SNS::Topic

Outputs:
  InstanceTypesRequested:
    Description: List of instance types requested in the ASG (filtered by InstanceTypesWanted and regional availability)
    Value: !GetAtt InstanceFilter.InstanceTypeNames

  NotificationTopic:
    Description: Monitoring notification topic
    Value: !Ref NotificationTopic

  DashboardUrl:
    Description: Ethermine Dashboard URL
    Value: !Sub "https://ethermine.org/miners/${EthWallet}/dashboard"
